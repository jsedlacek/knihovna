/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PoezieRouteImport } from './routes/poezie'
import { Route as OstatniRouteImport } from './routes/ostatni'
import { Route as DivadloRouteImport } from './routes/divadlo'
import { Route as DetiRouteImport } from './routes/deti'
import { Route as DebugRouteImport } from './routes/debug'
import { Route as BeletrieRouteImport } from './routes/beletrie'
import { Route as IndexRouteImport } from './routes/index'

const PoezieRoute = PoezieRouteImport.update({
  id: '/poezie',
  path: '/poezie',
  getParentRoute: () => rootRouteImport,
} as any)
const OstatniRoute = OstatniRouteImport.update({
  id: '/ostatni',
  path: '/ostatni',
  getParentRoute: () => rootRouteImport,
} as any)
const DivadloRoute = DivadloRouteImport.update({
  id: '/divadlo',
  path: '/divadlo',
  getParentRoute: () => rootRouteImport,
} as any)
const DetiRoute = DetiRouteImport.update({
  id: '/deti',
  path: '/deti',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugRoute = DebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRouteImport,
} as any)
const BeletrieRoute = BeletrieRouteImport.update({
  id: '/beletrie',
  path: '/beletrie',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/beletrie': typeof BeletrieRoute
  '/debug': typeof DebugRoute
  '/deti': typeof DetiRoute
  '/divadlo': typeof DivadloRoute
  '/ostatni': typeof OstatniRoute
  '/poezie': typeof PoezieRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/beletrie': typeof BeletrieRoute
  '/debug': typeof DebugRoute
  '/deti': typeof DetiRoute
  '/divadlo': typeof DivadloRoute
  '/ostatni': typeof OstatniRoute
  '/poezie': typeof PoezieRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/beletrie': typeof BeletrieRoute
  '/debug': typeof DebugRoute
  '/deti': typeof DetiRoute
  '/divadlo': typeof DivadloRoute
  '/ostatni': typeof OstatniRoute
  '/poezie': typeof PoezieRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/beletrie'
    | '/debug'
    | '/deti'
    | '/divadlo'
    | '/ostatni'
    | '/poezie'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/beletrie'
    | '/debug'
    | '/deti'
    | '/divadlo'
    | '/ostatni'
    | '/poezie'
  id:
    | '__root__'
    | '/'
    | '/beletrie'
    | '/debug'
    | '/deti'
    | '/divadlo'
    | '/ostatni'
    | '/poezie'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BeletrieRoute: typeof BeletrieRoute
  DebugRoute: typeof DebugRoute
  DetiRoute: typeof DetiRoute
  DivadloRoute: typeof DivadloRoute
  OstatniRoute: typeof OstatniRoute
  PoezieRoute: typeof PoezieRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/poezie': {
      id: '/poezie'
      path: '/poezie'
      fullPath: '/poezie'
      preLoaderRoute: typeof PoezieRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ostatni': {
      id: '/ostatni'
      path: '/ostatni'
      fullPath: '/ostatni'
      preLoaderRoute: typeof OstatniRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/divadlo': {
      id: '/divadlo'
      path: '/divadlo'
      fullPath: '/divadlo'
      preLoaderRoute: typeof DivadloRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deti': {
      id: '/deti'
      path: '/deti'
      fullPath: '/deti'
      preLoaderRoute: typeof DetiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beletrie': {
      id: '/beletrie'
      path: '/beletrie'
      fullPath: '/beletrie'
      preLoaderRoute: typeof BeletrieRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BeletrieRoute: BeletrieRoute,
  DebugRoute: DebugRoute,
  DetiRoute: DetiRoute,
  DivadloRoute: DivadloRoute,
  OstatniRoute: OstatniRoute,
  PoezieRoute: PoezieRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
